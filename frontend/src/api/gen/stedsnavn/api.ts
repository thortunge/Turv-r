/* tslint:disable */
/* eslint-disable */
/**
 * Kartverkets åpne API for søk etter stedsnavn
 *  API for søk etter stedsnavn. Man kan for eksempel søke etter et navn, et sted (et sted kan ha flere navn) eller steder i nærheten av et punkt. APIet returnerer kun de første 5000 resultatene.  Det er ikke nødvendig med innlogging/autorisasjon for å bruke APIet.  Medio desember 2023 ble APIet flyttet til et nytt endepunkt som er tilgjengelig på <a href=\"https://api.kartverket.no/stedsnavn/v1\">https://api.kartverket.no/stedsnavn/v1</a>. Det tidligere endepunktet <a href=\"https://ws.geonorge.no/stedsnavn/v1\">https://ws.geonorge.no/stedsnavn/v1</a> vil være tilgjengelig inntil videre, og vil fungere som en proxy til det nye endepunktet. Vi anbefaler likevel å bytte til det nye endepunktet.  Større eller ikke-kompatible endringer i APIet vil bli annonsert med minst 3 måneder forvarsel på <a href=\"https://status.kartverket.no\">https://status.kartverket.no</a>.     
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Fylker
 */
export interface Fylker {
    /**
     * 
     * @type {string}
     * @memberof Fylker
     */
    'fylkesnavn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Fylker
     */
    'fylkesnummer'?: string;
}
/**
 * 
 * @export
 * @interface GeoJsonCoords
 */
export interface GeoJsonCoords {
    /**
     * 
     * @type {Array<any>}
     * @memberof GeoJsonCoords
     */
    'coordinates'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof GeoJsonCoords
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface GeoJsonGeometry
 */
export interface GeoJsonGeometry {
    /**
     * 
     * @type {GeoJsonCoords}
     * @memberof GeoJsonGeometry
     */
    'geometry'?: GeoJsonCoords;
}
/**
 * 
 * @export
 * @interface Kommuner
 */
export interface Kommuner {
    /**
     * 
     * @type {string}
     * @memberof Kommuner
     */
    'kommunenavn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Kommuner
     */
    'kommunenummer'?: string;
}
/**
 * 
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * Sidenummeret som skal returneres. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof Metadata
     */
    'side'?: number;
    /**
     * Søkestrengen som ble sendt inn til API-et.
     * @type {string}
     * @memberof Metadata
     */
    'sokeStreng'?: string;
    /**
     * Antall treff som søket returnerte. Hvis det er et tungt søk er antallet ofte et grovestimat, ikke et nøyaktig antall.
     * @type {number}
     * @memberof Metadata
     */
    'totaltAntallTreff'?: number;
    /**
     * Antall treff per side. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof Metadata
     */
    'treffPerSide'?: number;
    /**
     * Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
     * @type {number}
     * @memberof Metadata
     */
    'utkoordsys'?: number;
    /**
     * Viser treff fra og medobjekt nummer X i responsen.
     * @type {number}
     * @memberof Metadata
     */
    'viserFra'?: number;
    /**
     * Viser treff til og med objekt nummer X i responsen.
     * @type {number}
     * @memberof Metadata
     */
    'viserTil'?: number;
}
/**
 * 
 * @export
 * @interface Navneobjekttype
 */
export interface Navneobjekttype {
    /**
     * Objekttypen som et sted kan tilhøre, f.eks en by, elv eller kirke
     * @type {string}
     * @memberof Navneobjekttype
     */
    'navneobjekttype'?: string;
    /**
     * 
     * @type {string}
     * @memberof Navneobjekttype
     */
    'navneobjekttypekode'?: string;
}
/**
 * 
 * @export
 * @interface Punkt
 */
export interface Punkt {
    /**
     * Distanse i meter til punktet det ble søkt etter.
     * @type {number}
     * @memberof Punkt
     */
    'meterFraPunkt'?: number;
    /**
     * Objekttypen som et sted kan tilhøre, f.eks en by, elv eller kirke
     * @type {string}
     * @memberof Punkt
     */
    'navneobjekttype'?: string;
    /**
     * Et konstruert representasjonspunkt for stedsnavnet.
     * @type {Representasjonspunkt}
     * @memberof Punkt
     */
    'representasjonspunkt'?: Representasjonspunkt;
    /**
     * 
     * @type {Array<SkrivemateJson>}
     * @memberof Punkt
     */
    'stedsnavn'?: Array<SkrivemateJson>;
    /**
     * Identifikator for et sted.
     * @type {number}
     * @memberof Punkt
     */
    'stedsnummer'?: number;
    /**
     * Status for selve stedet. Et sted kan være et relikt (historisk), aktivt eller planlagt sted. En kommune som ikke lenger eksisterer er f.eks. relikt, mens en bru som skal bygges er planlagt.
     * @type {string}
     * @memberof Punkt
     */
    'stedstatus'?: string;
}
/**
 * 
 * @export
 * @interface Representasjonspunkt
 */
export interface Representasjonspunkt {
    /**
     * Koordinatsystemet til representasjonspunktet.
     * @type {number}
     * @memberof Representasjonspunkt
     */
    'koordsys'?: number;
    /**
     * 
     * @type {number}
     * @memberof Representasjonspunkt
     */
    'nord'?: number;
    /**
     * 
     * @type {number}
     * @memberof Representasjonspunkt
     */
    'øst'?: number;
}
/**
 * 
 * @export
 * @interface ReturPunkt
 */
export interface ReturPunkt {
    /**
     * 
     * @type {Metadata}
     * @memberof ReturPunkt
     */
    'metadata'?: Metadata;
    /**
     * 
     * @type {Array<Punkt>}
     * @memberof ReturPunkt
     */
    'navn'?: Array<Punkt>;
}
/**
 * 
 * @export
 * @interface ReturSkrivemate
 */
export interface ReturSkrivemate {
    /**
     * 
     * @type {Metadata}
     * @memberof ReturSkrivemate
     */
    'metadata'?: Metadata;
    /**
     * 
     * @type {Array<Skrivemate>}
     * @memberof ReturSkrivemate
     */
    'navn'?: Array<Skrivemate>;
}
/**
 * 
 * @export
 * @interface ReturSted
 */
export interface ReturSted {
    /**
     * 
     * @type {Metadata}
     * @memberof ReturSted
     */
    'metadata'?: Metadata;
    /**
     * 
     * @type {Array<Sok>}
     * @memberof ReturSted
     */
    'navn'?: Array<Sok>;
}
/**
 * 
 * @export
 * @interface Skrivemate
 */
export interface Skrivemate {
    /**
     * 
     * @type {Array<Fylker>}
     * @memberof Skrivemate
     */
    'fylker'?: Array<Fylker>;
    /**
     * 
     * @type {Array<Kommuner>}
     * @memberof Skrivemate
     */
    'kommuner'?: Array<Kommuner>;
    /**
     * Objekttypen som et sted kan tilhøre, f.eks en by, elv eller kirke
     * @type {string}
     * @memberof Skrivemate
     */
    'navneobjekttype'?: string;
    /**
     * Angir statusen til navnet, f.eks. om det er et hovednavn eller sidenavn.
     * @type {string}
     * @memberof Skrivemate
     */
    'navnestatus'?: string;
    /**
     * Et konstruert representasjonspunkt for stedsnavnet.
     * @type {Representasjonspunkt}
     * @memberof Skrivemate
     */
    'representasjonspunkt'?: Representasjonspunkt;
    /**
     * En spesifikk måte å skrive et stedsnavn på.
     * @type {string}
     * @memberof Skrivemate
     */
    'skrivemåte'?: string;
    /**
     * Hvilken status denne skrivemåten har, f.eks. om den er historisk eller godkjent.
     * @type {string}
     * @memberof Skrivemate
     */
    'skrivemåtestatus'?: string;
    /**
     * Språket til skrivemåten/navnet.
     * @type {string}
     * @memberof Skrivemate
     */
    'språk'?: string;
    /**
     * Identifikator for et sted.
     * @type {number}
     * @memberof Skrivemate
     */
    'stedsnummer'?: number;
    /**
     * Status for selve stedet. Et sted kan være et relikt (historisk), aktivt eller planlagt sted. En kommune som ikke lenger eksisterer er f.eks. relikt, mens en bru som skal bygges er planlagt.
     * @type {string}
     * @memberof Skrivemate
     */
    'stedstatus'?: string;
}
/**
 * 
 * @export
 * @interface SkrivemateJson
 */
export interface SkrivemateJson {
    /**
     * Angir statusen til navnet, f.eks. om det er et hovednavn eller sidenavn.
     * @type {string}
     * @memberof SkrivemateJson
     */
    'navnestatus'?: string;
    /**
     * En spesifikk måte å skrive et stedsnavn på.
     * @type {string}
     * @memberof SkrivemateJson
     */
    'skrivemåte'?: string;
    /**
     * Hvilken status denne skrivemåten har, f.eks. om den er historisk eller godkjent.
     * @type {string}
     * @memberof SkrivemateJson
     */
    'skrivemåtestatus'?: string;
    /**
     * Språket til skrivemåten/navnet.
     * @type {string}
     * @memberof SkrivemateJson
     */
    'språk'?: string;
    /**
     * Et sted kan ha flere stedsnavn, dette er identifikatoren til stedsnavnet.
     * @type {number}
     * @memberof SkrivemateJson
     */
    'stedsnavnnummer'?: number;
}
/**
 * 
 * @export
 * @interface Sok
 */
export interface Sok {
    /**
     * 
     * @type {Array<Fylker>}
     * @memberof Sok
     */
    'fylker'?: Array<Fylker>;
    /**
     * Stedsnavnet sin fullstendige geometri i en geojson-struktur.
     * @type {GeoJsonGeometry}
     * @memberof Sok
     */
    'geojson'?: GeoJsonGeometry;
    /**
     * 
     * @type {Array<Kommuner>}
     * @memberof Sok
     */
    'kommuner'?: Array<Kommuner>;
    /**
     * Objekttypen som et sted kan tilhøre, f.eks en by, elv eller kirke
     * @type {string}
     * @memberof Sok
     */
    'navneobjekttype'?: string;
    /**
     * Det som vises er den nyeste av de tre oppdateringsdatoene for stedet, skrivemåten og stedsnavnet.
     * @type {string}
     * @memberof Sok
     */
    'oppdateringsdato'?: string;
    /**
     * Et konstruert representasjonspunkt for stedsnavnet.
     * @type {Representasjonspunkt}
     * @memberof Sok
     */
    'representasjonspunkt'?: Representasjonspunkt;
    /**
     * 
     * @type {Array<SkrivemateJson>}
     * @memberof Sok
     */
    'stedsnavn'?: Array<SkrivemateJson>;
    /**
     * Identifikator for et sted.
     * @type {number}
     * @memberof Sok
     */
    'stedsnummer'?: number;
    /**
     * Status for selve stedet. Et sted kan være et relikt (historisk), aktivt eller planlagt sted. En kommune som ikke lenger eksisterer er f.eks. relikt, mens en bru som skal bygges er planlagt.
     * @type {string}
     * @memberof Sok
     */
    'stedstatus'?: string;
}
/**
 * 
 * @export
 * @interface Sprak
 */
export interface Sprak {
    /**
     * Språket til skrivemåten/navnet.
     * @type {string}
     * @memberof Sprak
     */
    'språk'?: string;
    /**
     * 
     * @type {string}
     * @memberof Sprak
     */
    'språkkode'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Søk etter et spesifikt navn (skrivemåte/stedsnavn). Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&fuzzy=false</p>
         * @summary Søk etter et spesifikt navn (skrivemåte/stedsnavn).
         * @param {string} [sok] Søk etter stedsnavn. Støtter wildcard-søk (*)
         * @param {boolean} [fuzzy] Sett til \&quot;true\&quot; for å utføre et fuzzy-søk. Søket vil da prøve å finne alle navn som ligner på det du søker etter. Treffene vil sorteres etter hvor mye de ligner på søkebegrepet. Kan være litt tregere enn et vanlig søk.
         * @param {Array<string>} [fnr] Søk innenfor et fylkesnummer. Bestående av two tegn med ledende 0 om nødvendig. Kan søke i flere fylker ved å gjenta parameteret, f.eks. fnr&#x3D;50&amp;fnr&#x3D;03
         * @param {Array<string>} [knr] Søk innenfor en kommune ved å skrive inn kommunenummeret. Bestående av fire tegn med ledende 0 om nødvendig. Kan søke i flere kommuner ved å gjenta parameteret, f.eks. knr&#x3D;5001&amp;knr&#x3D;0301
         * @param {string} [kommunenavn] Søk etter treff i kommunen med oppgitt navn. Vær obs på at flere kommuner har samme navn, det anbefales derfor å søke etter kommunenummer hvis mulig.
         * @param {string} [fylkesnavn] Søk etter treff i fylket med oppgitt navn.
         * @param {string} [sprak] Filtrer skrivemåte etter språk, vis kun de skrivemåtene som er i det angitte språk. Se i \&quot;/sprak\&quot;-endepunktet for å se mulige valg for språkkoder.
         * @param {number} [utkoordsys] Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
         * @param {number} [treffPerSide] Antall treff per side. Minimum 1, maksimum 500.
         * @param {number} [side] Sidenummeret som skal returneres. Minimum 1, maksimum 500.
         * @param {string} [filtrer] Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navnGet: async (sok?: string, fuzzy?: boolean, fnr?: Array<string>, knr?: Array<string>, kommunenavn?: string, fylkesnavn?: string, sprak?: string, utkoordsys?: number, treffPerSide?: number, side?: number, filtrer?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/navn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sok !== undefined) {
                localVarQueryParameter['sok'] = sok;
            }

            if (fuzzy !== undefined) {
                localVarQueryParameter['fuzzy'] = fuzzy;
            }

            if (fnr) {
                localVarQueryParameter['fnr'] = fnr;
            }

            if (knr) {
                localVarQueryParameter['knr'] = knr;
            }

            if (kommunenavn !== undefined) {
                localVarQueryParameter['kommunenavn'] = kommunenavn;
            }

            if (fylkesnavn !== undefined) {
                localVarQueryParameter['fylkesnavn'] = fylkesnavn;
            }

            if (sprak !== undefined) {
                localVarQueryParameter['sprak'] = sprak;
            }

            if (utkoordsys !== undefined) {
                localVarQueryParameter['utkoordsys'] = utkoordsys;
            }

            if (treffPerSide !== undefined) {
                localVarQueryParameter['treffPerSide'] = treffPerSide;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (filtrer !== undefined) {
                localVarQueryParameter['filtrer'] = filtrer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha. Man kan filtrere på navneobjekttypekoder i noen søk, dette er en oversikt over de gyldige alternativene.
         * @summary Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navneobjekttyperGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/navneobjekttyper`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gjør et geografisk søk etter de nærmeste stedene. Vær obs på at et sted kan ha flere stedsnavn og at hvert stedsnavn kan ha flere likestilte skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister slik at det mest \"nærliggende\" stedet kommer først (en bekk kommer f.eks. før et fylke). Innenfor hver kategori er så returen sortert etter distanse til punktet som man søkte etter.  <p>For eksempel ?nord=60.5&ost=11.12&koordsys=4258&radius=1000</p>
         * @summary Finn steder nær et gitt geografisk punkt.
         * @param {number} nord Nord-koordinaten/Latitude
         * @param {number} ost Øst-koordinaten/Longitude
         * @param {number} koordsys Koordinatsystemet (EPSG) til koordinatene du søker med. Angis som en SRID, for eksempel 4258 eller 25833.
         * @param {number} [radius] Radius i antall meter som søket leter etter stedsnavn i. Maksimum er 5000m.
         * @param {number} [utkoordsys] Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
         * @param {number} [treffPerSide] Antall treff per side. Minimum 1, maksimum 500.
         * @param {number} [side] Sidenummeret som skal returneres. Minimum 1, maksimum 500.
         * @param {string} [filtrer] Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        punktGet: async (nord: number, ost: number, koordsys: number, radius?: number, utkoordsys?: number, treffPerSide?: number, side?: number, filtrer?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nord' is not null or undefined
            assertParamExists('punktGet', 'nord', nord)
            // verify required parameter 'ost' is not null or undefined
            assertParamExists('punktGet', 'ost', ost)
            // verify required parameter 'koordsys' is not null or undefined
            assertParamExists('punktGet', 'koordsys', koordsys)
            const localVarPath = `/punkt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nord !== undefined) {
                localVarQueryParameter['nord'] = nord;
            }

            if (ost !== undefined) {
                localVarQueryParameter['ost'] = ost;
            }

            if (koordsys !== undefined) {
                localVarQueryParameter['koordsys'] = koordsys;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (utkoordsys !== undefined) {
                localVarQueryParameter['utkoordsys'] = utkoordsys;
            }

            if (treffPerSide !== undefined) {
                localVarQueryParameter['treffPerSide'] = treffPerSide;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (filtrer !== undefined) {
                localVarQueryParameter['filtrer'] = filtrer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Man kan filtrere på språkkoder i noen søk, dette er en oversikt over de gyldige alternativene.
         * @summary Vis alle språk som et navn kan ha.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sprakGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sprak`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Søk etter et sted. Et sted kan ha flere stedsnavn, hvert navn kan ha flere skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&knr=5001</p>
         * @summary Søk etter et sted. Et sted kan ha flere navn og hvert navn kan ha flere skrivemåter.
         * @param {string} [sok] Søk etter stedsnavn. Støtter wildcard-søk (*)
         * @param {boolean} [fuzzy] Sett til \&quot;true\&quot; for å utføre et fuzzy-søk. Søket vil da prøve å finne alle navn som ligner på det du søker etter. Treffene vil sorteres etter hvor mye de ligner på søkebegrepet. Kan være litt tregere enn et vanlig søk.
         * @param {Array<string>} [fnr] Søk innenfor et fylkesnummer. Bestående av two tegn med ledende 0 om nødvendig. Kan søke i flere fylker ved å gjenta parameteret, f.eks. fnr&#x3D;50&amp;fnr&#x3D;03
         * @param {Array<string>} [knr] Søk innenfor en kommune ved å skrive inn kommunenummeret. Bestående av fire tegn med ledende 0 om nødvendig. Kan søke i flere kommuner ved å gjenta parameteret, f.eks. knr&#x3D;5001&amp;knr&#x3D;0301
         * @param {string} [kommunenavn] Søk etter treff i kommunen med oppgitt navn. Vær obs på at flere kommuner har samme navn, det anbefales derfor å søke etter kommunenummer hvis mulig.
         * @param {string} [fylkesnavn] Søk etter treff i fylket med oppgitt navn.
         * @param {number} [stedsnummer] Finn stedsnavn med et gitt stedsnummer.
         * @param {Array<string>} [navneobjekttype] Filtrer returen etter navneobjekttypekode, viser kun de forekomstene som har angitt navneobjekttype. Sjekk endepunktet /navneobjekttyper for å se mulige valg for navneobjekttypekoder. Det er mulig å filtrere på flere navneobjekttypekoder ved å gjenta parameteret.
         * @param {number} [utkoordsys] Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
         * @param {number} [treffPerSide] Antall treff per side. Minimum 1, maksimum 500.
         * @param {number} [side] Sidenummeret som skal returneres. Minimum 1, maksimum 500.
         * @param {string} [filtrer] Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stedGet: async (sok?: string, fuzzy?: boolean, fnr?: Array<string>, knr?: Array<string>, kommunenavn?: string, fylkesnavn?: string, stedsnummer?: number, navneobjekttype?: Array<string>, utkoordsys?: number, treffPerSide?: number, side?: number, filtrer?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sok !== undefined) {
                localVarQueryParameter['sok'] = sok;
            }

            if (fuzzy !== undefined) {
                localVarQueryParameter['fuzzy'] = fuzzy;
            }

            if (fnr) {
                localVarQueryParameter['fnr'] = fnr;
            }

            if (knr) {
                localVarQueryParameter['knr'] = knr;
            }

            if (kommunenavn !== undefined) {
                localVarQueryParameter['kommunenavn'] = kommunenavn;
            }

            if (fylkesnavn !== undefined) {
                localVarQueryParameter['fylkesnavn'] = fylkesnavn;
            }

            if (stedsnummer !== undefined) {
                localVarQueryParameter['stedsnummer'] = stedsnummer;
            }

            if (navneobjekttype) {
                localVarQueryParameter['navneobjekttype'] = navneobjekttype;
            }

            if (utkoordsys !== undefined) {
                localVarQueryParameter['utkoordsys'] = utkoordsys;
            }

            if (treffPerSide !== undefined) {
                localVarQueryParameter['treffPerSide'] = treffPerSide;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (filtrer !== undefined) {
                localVarQueryParameter['filtrer'] = filtrer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Søk etter et spesifikt navn (skrivemåte/stedsnavn). Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&fuzzy=false</p>
         * @summary Søk etter et spesifikt navn (skrivemåte/stedsnavn).
         * @param {string} [sok] Søk etter stedsnavn. Støtter wildcard-søk (*)
         * @param {boolean} [fuzzy] Sett til \&quot;true\&quot; for å utføre et fuzzy-søk. Søket vil da prøve å finne alle navn som ligner på det du søker etter. Treffene vil sorteres etter hvor mye de ligner på søkebegrepet. Kan være litt tregere enn et vanlig søk.
         * @param {Array<string>} [fnr] Søk innenfor et fylkesnummer. Bestående av two tegn med ledende 0 om nødvendig. Kan søke i flere fylker ved å gjenta parameteret, f.eks. fnr&#x3D;50&amp;fnr&#x3D;03
         * @param {Array<string>} [knr] Søk innenfor en kommune ved å skrive inn kommunenummeret. Bestående av fire tegn med ledende 0 om nødvendig. Kan søke i flere kommuner ved å gjenta parameteret, f.eks. knr&#x3D;5001&amp;knr&#x3D;0301
         * @param {string} [kommunenavn] Søk etter treff i kommunen med oppgitt navn. Vær obs på at flere kommuner har samme navn, det anbefales derfor å søke etter kommunenummer hvis mulig.
         * @param {string} [fylkesnavn] Søk etter treff i fylket med oppgitt navn.
         * @param {string} [sprak] Filtrer skrivemåte etter språk, vis kun de skrivemåtene som er i det angitte språk. Se i \&quot;/sprak\&quot;-endepunktet for å se mulige valg for språkkoder.
         * @param {number} [utkoordsys] Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
         * @param {number} [treffPerSide] Antall treff per side. Minimum 1, maksimum 500.
         * @param {number} [side] Sidenummeret som skal returneres. Minimum 1, maksimum 500.
         * @param {string} [filtrer] Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async navnGet(sok?: string, fuzzy?: boolean, fnr?: Array<string>, knr?: Array<string>, kommunenavn?: string, fylkesnavn?: string, sprak?: string, utkoordsys?: number, treffPerSide?: number, side?: number, filtrer?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReturSkrivemate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.navnGet(sok, fuzzy, fnr, knr, kommunenavn, fylkesnavn, sprak, utkoordsys, treffPerSide, side, filtrer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.navnGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha. Man kan filtrere på navneobjekttypekoder i noen søk, dette er en oversikt over de gyldige alternativene.
         * @summary Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async navneobjekttyperGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Navneobjekttype>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.navneobjekttyperGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.navneobjekttyperGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gjør et geografisk søk etter de nærmeste stedene. Vær obs på at et sted kan ha flere stedsnavn og at hvert stedsnavn kan ha flere likestilte skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister slik at det mest \"nærliggende\" stedet kommer først (en bekk kommer f.eks. før et fylke). Innenfor hver kategori er så returen sortert etter distanse til punktet som man søkte etter.  <p>For eksempel ?nord=60.5&ost=11.12&koordsys=4258&radius=1000</p>
         * @summary Finn steder nær et gitt geografisk punkt.
         * @param {number} nord Nord-koordinaten/Latitude
         * @param {number} ost Øst-koordinaten/Longitude
         * @param {number} koordsys Koordinatsystemet (EPSG) til koordinatene du søker med. Angis som en SRID, for eksempel 4258 eller 25833.
         * @param {number} [radius] Radius i antall meter som søket leter etter stedsnavn i. Maksimum er 5000m.
         * @param {number} [utkoordsys] Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
         * @param {number} [treffPerSide] Antall treff per side. Minimum 1, maksimum 500.
         * @param {number} [side] Sidenummeret som skal returneres. Minimum 1, maksimum 500.
         * @param {string} [filtrer] Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async punktGet(nord: number, ost: number, koordsys: number, radius?: number, utkoordsys?: number, treffPerSide?: number, side?: number, filtrer?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReturPunkt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.punktGet(nord, ost, koordsys, radius, utkoordsys, treffPerSide, side, filtrer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.punktGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Man kan filtrere på språkkoder i noen søk, dette er en oversikt over de gyldige alternativene.
         * @summary Vis alle språk som et navn kan ha.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sprakGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Sprak>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sprakGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sprakGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Søk etter et sted. Et sted kan ha flere stedsnavn, hvert navn kan ha flere skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&knr=5001</p>
         * @summary Søk etter et sted. Et sted kan ha flere navn og hvert navn kan ha flere skrivemåter.
         * @param {string} [sok] Søk etter stedsnavn. Støtter wildcard-søk (*)
         * @param {boolean} [fuzzy] Sett til \&quot;true\&quot; for å utføre et fuzzy-søk. Søket vil da prøve å finne alle navn som ligner på det du søker etter. Treffene vil sorteres etter hvor mye de ligner på søkebegrepet. Kan være litt tregere enn et vanlig søk.
         * @param {Array<string>} [fnr] Søk innenfor et fylkesnummer. Bestående av two tegn med ledende 0 om nødvendig. Kan søke i flere fylker ved å gjenta parameteret, f.eks. fnr&#x3D;50&amp;fnr&#x3D;03
         * @param {Array<string>} [knr] Søk innenfor en kommune ved å skrive inn kommunenummeret. Bestående av fire tegn med ledende 0 om nødvendig. Kan søke i flere kommuner ved å gjenta parameteret, f.eks. knr&#x3D;5001&amp;knr&#x3D;0301
         * @param {string} [kommunenavn] Søk etter treff i kommunen med oppgitt navn. Vær obs på at flere kommuner har samme navn, det anbefales derfor å søke etter kommunenummer hvis mulig.
         * @param {string} [fylkesnavn] Søk etter treff i fylket med oppgitt navn.
         * @param {number} [stedsnummer] Finn stedsnavn med et gitt stedsnummer.
         * @param {Array<string>} [navneobjekttype] Filtrer returen etter navneobjekttypekode, viser kun de forekomstene som har angitt navneobjekttype. Sjekk endepunktet /navneobjekttyper for å se mulige valg for navneobjekttypekoder. Det er mulig å filtrere på flere navneobjekttypekoder ved å gjenta parameteret.
         * @param {number} [utkoordsys] Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
         * @param {number} [treffPerSide] Antall treff per side. Minimum 1, maksimum 500.
         * @param {number} [side] Sidenummeret som skal returneres. Minimum 1, maksimum 500.
         * @param {string} [filtrer] Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stedGet(sok?: string, fuzzy?: boolean, fnr?: Array<string>, knr?: Array<string>, kommunenavn?: string, fylkesnavn?: string, stedsnummer?: number, navneobjekttype?: Array<string>, utkoordsys?: number, treffPerSide?: number, side?: number, filtrer?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReturSted>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stedGet(sok, fuzzy, fnr, knr, kommunenavn, fylkesnavn, stedsnummer, navneobjekttype, utkoordsys, treffPerSide, side, filtrer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.stedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Søk etter et spesifikt navn (skrivemåte/stedsnavn). Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&fuzzy=false</p>
         * @summary Søk etter et spesifikt navn (skrivemåte/stedsnavn).
         * @param {DefaultApiNavnGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navnGet(requestParameters: DefaultApiNavnGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ReturSkrivemate> {
            return localVarFp.navnGet(requestParameters.sok, requestParameters.fuzzy, requestParameters.fnr, requestParameters.knr, requestParameters.kommunenavn, requestParameters.fylkesnavn, requestParameters.sprak, requestParameters.utkoordsys, requestParameters.treffPerSide, requestParameters.side, requestParameters.filtrer, options).then((request) => request(axios, basePath));
        },
        /**
         * Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha. Man kan filtrere på navneobjekttypekoder i noen søk, dette er en oversikt over de gyldige alternativene.
         * @summary Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navneobjekttyperGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Navneobjekttype>> {
            return localVarFp.navneobjekttyperGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Gjør et geografisk søk etter de nærmeste stedene. Vær obs på at et sted kan ha flere stedsnavn og at hvert stedsnavn kan ha flere likestilte skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister slik at det mest \"nærliggende\" stedet kommer først (en bekk kommer f.eks. før et fylke). Innenfor hver kategori er så returen sortert etter distanse til punktet som man søkte etter.  <p>For eksempel ?nord=60.5&ost=11.12&koordsys=4258&radius=1000</p>
         * @summary Finn steder nær et gitt geografisk punkt.
         * @param {DefaultApiPunktGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        punktGet(requestParameters: DefaultApiPunktGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReturPunkt> {
            return localVarFp.punktGet(requestParameters.nord, requestParameters.ost, requestParameters.koordsys, requestParameters.radius, requestParameters.utkoordsys, requestParameters.treffPerSide, requestParameters.side, requestParameters.filtrer, options).then((request) => request(axios, basePath));
        },
        /**
         * Man kan filtrere på språkkoder i noen søk, dette er en oversikt over de gyldige alternativene.
         * @summary Vis alle språk som et navn kan ha.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sprakGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Sprak>> {
            return localVarFp.sprakGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Søk etter et sted. Et sted kan ha flere stedsnavn, hvert navn kan ha flere skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&knr=5001</p>
         * @summary Søk etter et sted. Et sted kan ha flere navn og hvert navn kan ha flere skrivemåter.
         * @param {DefaultApiStedGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stedGet(requestParameters: DefaultApiStedGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ReturSted> {
            return localVarFp.stedGet(requestParameters.sok, requestParameters.fuzzy, requestParameters.fnr, requestParameters.knr, requestParameters.kommunenavn, requestParameters.fylkesnavn, requestParameters.stedsnummer, requestParameters.navneobjekttype, requestParameters.utkoordsys, requestParameters.treffPerSide, requestParameters.side, requestParameters.filtrer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for navnGet operation in DefaultApi.
 * @export
 * @interface DefaultApiNavnGetRequest
 */
export interface DefaultApiNavnGetRequest {
    /**
     * Søk etter stedsnavn. Støtter wildcard-søk (*)
     * @type {string}
     * @memberof DefaultApiNavnGet
     */
    readonly sok?: string

    /**
     * Sett til \&quot;true\&quot; for å utføre et fuzzy-søk. Søket vil da prøve å finne alle navn som ligner på det du søker etter. Treffene vil sorteres etter hvor mye de ligner på søkebegrepet. Kan være litt tregere enn et vanlig søk.
     * @type {boolean}
     * @memberof DefaultApiNavnGet
     */
    readonly fuzzy?: boolean

    /**
     * Søk innenfor et fylkesnummer. Bestående av two tegn med ledende 0 om nødvendig. Kan søke i flere fylker ved å gjenta parameteret, f.eks. fnr&#x3D;50&amp;fnr&#x3D;03
     * @type {Array<string>}
     * @memberof DefaultApiNavnGet
     */
    readonly fnr?: Array<string>

    /**
     * Søk innenfor en kommune ved å skrive inn kommunenummeret. Bestående av fire tegn med ledende 0 om nødvendig. Kan søke i flere kommuner ved å gjenta parameteret, f.eks. knr&#x3D;5001&amp;knr&#x3D;0301
     * @type {Array<string>}
     * @memberof DefaultApiNavnGet
     */
    readonly knr?: Array<string>

    /**
     * Søk etter treff i kommunen med oppgitt navn. Vær obs på at flere kommuner har samme navn, det anbefales derfor å søke etter kommunenummer hvis mulig.
     * @type {string}
     * @memberof DefaultApiNavnGet
     */
    readonly kommunenavn?: string

    /**
     * Søk etter treff i fylket med oppgitt navn.
     * @type {string}
     * @memberof DefaultApiNavnGet
     */
    readonly fylkesnavn?: string

    /**
     * Filtrer skrivemåte etter språk, vis kun de skrivemåtene som er i det angitte språk. Se i \&quot;/sprak\&quot;-endepunktet for å se mulige valg for språkkoder.
     * @type {string}
     * @memberof DefaultApiNavnGet
     */
    readonly sprak?: string

    /**
     * Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
     * @type {number}
     * @memberof DefaultApiNavnGet
     */
    readonly utkoordsys?: number

    /**
     * Antall treff per side. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof DefaultApiNavnGet
     */
    readonly treffPerSide?: number

    /**
     * Sidenummeret som skal returneres. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof DefaultApiNavnGet
     */
    readonly side?: number

    /**
     * Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
     * @type {string}
     * @memberof DefaultApiNavnGet
     */
    readonly filtrer?: string
}

/**
 * Request parameters for punktGet operation in DefaultApi.
 * @export
 * @interface DefaultApiPunktGetRequest
 */
export interface DefaultApiPunktGetRequest {
    /**
     * Nord-koordinaten/Latitude
     * @type {number}
     * @memberof DefaultApiPunktGet
     */
    readonly nord: number

    /**
     * Øst-koordinaten/Longitude
     * @type {number}
     * @memberof DefaultApiPunktGet
     */
    readonly ost: number

    /**
     * Koordinatsystemet (EPSG) til koordinatene du søker med. Angis som en SRID, for eksempel 4258 eller 25833.
     * @type {number}
     * @memberof DefaultApiPunktGet
     */
    readonly koordsys: number

    /**
     * Radius i antall meter som søket leter etter stedsnavn i. Maksimum er 5000m.
     * @type {number}
     * @memberof DefaultApiPunktGet
     */
    readonly radius?: number

    /**
     * Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
     * @type {number}
     * @memberof DefaultApiPunktGet
     */
    readonly utkoordsys?: number

    /**
     * Antall treff per side. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof DefaultApiPunktGet
     */
    readonly treffPerSide?: number

    /**
     * Sidenummeret som skal returneres. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof DefaultApiPunktGet
     */
    readonly side?: number

    /**
     * Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
     * @type {string}
     * @memberof DefaultApiPunktGet
     */
    readonly filtrer?: string
}

/**
 * Request parameters for stedGet operation in DefaultApi.
 * @export
 * @interface DefaultApiStedGetRequest
 */
export interface DefaultApiStedGetRequest {
    /**
     * Søk etter stedsnavn. Støtter wildcard-søk (*)
     * @type {string}
     * @memberof DefaultApiStedGet
     */
    readonly sok?: string

    /**
     * Sett til \&quot;true\&quot; for å utføre et fuzzy-søk. Søket vil da prøve å finne alle navn som ligner på det du søker etter. Treffene vil sorteres etter hvor mye de ligner på søkebegrepet. Kan være litt tregere enn et vanlig søk.
     * @type {boolean}
     * @memberof DefaultApiStedGet
     */
    readonly fuzzy?: boolean

    /**
     * Søk innenfor et fylkesnummer. Bestående av two tegn med ledende 0 om nødvendig. Kan søke i flere fylker ved å gjenta parameteret, f.eks. fnr&#x3D;50&amp;fnr&#x3D;03
     * @type {Array<string>}
     * @memberof DefaultApiStedGet
     */
    readonly fnr?: Array<string>

    /**
     * Søk innenfor en kommune ved å skrive inn kommunenummeret. Bestående av fire tegn med ledende 0 om nødvendig. Kan søke i flere kommuner ved å gjenta parameteret, f.eks. knr&#x3D;5001&amp;knr&#x3D;0301
     * @type {Array<string>}
     * @memberof DefaultApiStedGet
     */
    readonly knr?: Array<string>

    /**
     * Søk etter treff i kommunen med oppgitt navn. Vær obs på at flere kommuner har samme navn, det anbefales derfor å søke etter kommunenummer hvis mulig.
     * @type {string}
     * @memberof DefaultApiStedGet
     */
    readonly kommunenavn?: string

    /**
     * Søk etter treff i fylket med oppgitt navn.
     * @type {string}
     * @memberof DefaultApiStedGet
     */
    readonly fylkesnavn?: string

    /**
     * Finn stedsnavn med et gitt stedsnummer.
     * @type {number}
     * @memberof DefaultApiStedGet
     */
    readonly stedsnummer?: number

    /**
     * Filtrer returen etter navneobjekttypekode, viser kun de forekomstene som har angitt navneobjekttype. Sjekk endepunktet /navneobjekttyper for å se mulige valg for navneobjekttypekoder. Det er mulig å filtrere på flere navneobjekttypekoder ved å gjenta parameteret.
     * @type {Array<string>}
     * @memberof DefaultApiStedGet
     */
    readonly navneobjekttype?: Array<string>

    /**
     * Angi det koordinatsystemet som du ønsker at geometrien i returen skal transformeres til, oppgis som en SRID (altså tallene i en EPSG-kode, f.eks. 4258 eller 25833). Standard er 4258.
     * @type {number}
     * @memberof DefaultApiStedGet
     */
    readonly utkoordsys?: number

    /**
     * Antall treff per side. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof DefaultApiStedGet
     */
    readonly treffPerSide?: number

    /**
     * Sidenummeret som skal returneres. Minimum 1, maksimum 500.
     * @type {number}
     * @memberof DefaultApiStedGet
     */
    readonly side?: number

    /**
     * Vis kun de elementene du vil ha i returen. Kommaseparert liste med nøkler. For å hente ut underobjekter bruk \&quot;.\&quot;-notasjon, f.eks. &amp;filtrer&#x3D;navn.stedsnummer,metadata
     * @type {string}
     * @memberof DefaultApiStedGet
     */
    readonly filtrer?: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Søk etter et spesifikt navn (skrivemåte/stedsnavn). Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&fuzzy=false</p>
     * @summary Søk etter et spesifikt navn (skrivemåte/stedsnavn).
     * @param {DefaultApiNavnGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public navnGet(requestParameters: DefaultApiNavnGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).navnGet(requestParameters.sok, requestParameters.fuzzy, requestParameters.fnr, requestParameters.knr, requestParameters.kommunenavn, requestParameters.fylkesnavn, requestParameters.sprak, requestParameters.utkoordsys, requestParameters.treffPerSide, requestParameters.side, requestParameters.filtrer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha. Man kan filtrere på navneobjekttypekoder i noen søk, dette er en oversikt over de gyldige alternativene.
     * @summary Vis alle navneobjekttyper (f.eks by, elv, kirke) som et sted kan ha.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public navneobjekttyperGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).navneobjekttyperGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gjør et geografisk søk etter de nærmeste stedene. Vær obs på at et sted kan ha flere stedsnavn og at hvert stedsnavn kan ha flere likestilte skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister slik at det mest \"nærliggende\" stedet kommer først (en bekk kommer f.eks. før et fylke). Innenfor hver kategori er så returen sortert etter distanse til punktet som man søkte etter.  <p>For eksempel ?nord=60.5&ost=11.12&koordsys=4258&radius=1000</p>
     * @summary Finn steder nær et gitt geografisk punkt.
     * @param {DefaultApiPunktGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public punktGet(requestParameters: DefaultApiPunktGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).punktGet(requestParameters.nord, requestParameters.ost, requestParameters.koordsys, requestParameters.radius, requestParameters.utkoordsys, requestParameters.treffPerSide, requestParameters.side, requestParameters.filtrer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Man kan filtrere på språkkoder i noen søk, dette er en oversikt over de gyldige alternativene.
     * @summary Vis alle språk som et navn kan ha.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sprakGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sprakGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Søk etter et sted. Et sted kan ha flere stedsnavn, hvert navn kan ha flere skrivemåter. Returen er sortert etter stedets kategorisering innenfor Sentralt stedsnavnsregister (et fylke kommer f.eks. før en bekk). Innenfor hver kategori er så returen sortert etter hvor godt det matcher søkebegrepet. <p>For eksempel ?sok=Trondheim*&knr=5001</p>
     * @summary Søk etter et sted. Et sted kan ha flere navn og hvert navn kan ha flere skrivemåter.
     * @param {DefaultApiStedGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stedGet(requestParameters: DefaultApiStedGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).stedGet(requestParameters.sok, requestParameters.fuzzy, requestParameters.fnr, requestParameters.knr, requestParameters.kommunenavn, requestParameters.fylkesnavn, requestParameters.stedsnummer, requestParameters.navneobjekttype, requestParameters.utkoordsys, requestParameters.treffPerSide, requestParameters.side, requestParameters.filtrer, options).then((request) => request(this.axios, this.basePath));
    }
}



